package org.giuse.CodeGenerator.parser.models;

import org.giuse.CodeGenerator.parser.models.statements.Statement;
import org.giuse.CodeGenerator.utils.FormatUtils;

import java.util.ArrayList;

public class Function implements Statement{
    private String scope;
    private String returnType;
    private String name;
    private ArrayList<Attribute> parameters;
    private Boolean isOverride;
    private Boolean isVirtual;

    private ArrayList<Statement> body;

    private Function(String scope, String returnType, String name, ArrayList<Attribute> parameters, Boolean isVirtual, Boolean isOverride, ArrayList<Statement> body) {
        this.scope = scope;
        this.returnType = returnType;
        this.name = name;
        this.parameters = parameters;
        this.isVirtual = isVirtual;
        this.isOverride = isOverride;
        this.body = body;
    }

    public void setOverride(Boolean override) {
        isOverride = override;
    }

    public String getReturnType() {
        return returnType;
    }

    public void setReturnType(String returnType) {
        this.returnType = returnType;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ArrayList<Attribute> getParameters() {
        return parameters;
    }

    public void setParameters(ArrayList<Attribute> parameters) {
        this.parameters = parameters;
    }

    public void setScope(String scope) {
        this.scope = scope;
    }

    public String getScope() {
        return this.scope;
    }

    public Boolean isVirtual() {
        return isVirtual;
    }

    public void setVirtual(Boolean virtual) {
        isVirtual = virtual;
    }

    @Override
    public String generateJava(int indentation) {
        StringBuilder functionContent = new StringBuilder();
        String formattedIndentation = FormatUtils.getIndentation(indentation);

        if(isOverride)
            functionContent.append(formattedIndentation).append("@Override\n");

        functionContent.append(formattedIndentation);

        if((this.scope!= null) && (!this.scope.isEmpty()))
            functionContent.append(this.scope).append(" ");

        if((this.returnType!= null) && (!this.returnType.isEmpty()))
            functionContent.append(this.returnType).append(" ");

        functionContent.append(this.name).append("(");

        for(int i=0;i<getParameters().size();i++){
            if(i==0)
                functionContent.append(getParameters().get(i).generateJava(0));
            else
                functionContent.append(", ").append(getParameters().get(i).generateJava(0));
        }

        functionContent.append(")");

        if(isVirtual())
            functionContent.append(";");
        else{
            functionContent.append("{\n").append(FormatUtils.getIndentation(indentation)).append("\t").append("//TODO Autogenerated by VPCodeGenerator\n");

            for(Statement statement: body)
                functionContent.append(statement.generateJava(indentation+1));

            functionContent.append(formattedIndentation).append("}");
        }

        return functionContent.toString();
    }

    public static class Builder{
        private final String bScope;
        private final String bName;
        private final String bReturnType;
        private Boolean bIsOverride;
        private Boolean bIsVirtual;
        private final ArrayList<Attribute> bParameters;

        private ArrayList<Statement> bBody;

        public Builder(String name, String scope, String returnType){
            this.bScope = scope;
            this.bName = name;
            this.bReturnType = returnType;
            this.bParameters = new ArrayList<>();
            this.bIsVirtual = false;
            this.bIsOverride = false;
            this.bBody = new ArrayList<>();
        }

        public Builder isVirtual(){
            this.bIsVirtual = true;
            return this;
        }

        public Builder isOverride(){
            this.bIsOverride = true;
            return this;
        }

        public Builder addStatement(Statement statement){
            this.bBody.add(statement);
            return this;
        }

        public Builder addParameter(Attribute parameter){
            this.bParameters.add(parameter);
            return this;
        }

        public Function build(){
            return new Function(bScope, bReturnType, bName, bParameters, bIsVirtual, bIsOverride, bBody);
        }
    }
}
